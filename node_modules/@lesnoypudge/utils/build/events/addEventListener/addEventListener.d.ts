export declare namespace addEventListener {
    type ElementUnion = HTMLElement | Document | Window;
    type AvailableEventNames<ProvidedElement extends ElementUnion> = (ProvidedElement extends Document ? DocumentEventMap : ProvidedElement extends Window ? WindowEventMap : ProvidedElement extends HTMLElement ? HTMLElementEventMap : never);
}
type AddEventListener = <ProvidedElement extends addEventListener.ElementUnion, EventName extends keyof addEventListener.AvailableEventNames<ProvidedElement>>(element: ProvidedElement, eventName: EventName, fn: (e: addEventListener.AvailableEventNames<ProvidedElement>[EventName]) => void, options?: AddEventListenerOptions) => () => void;
export declare const addEventListener: AddEventListener;
export {};
