export declare namespace hotKey {
    type Action = (e: KeyboardEvent) => void;
    type Handler = (e: KeyboardEvent) => boolean;
    type HotKeyOptions = {
        prevent?: boolean;
        stop?: boolean;
        stopImmediate?: boolean;
    };
    type HotKey = (action: Action, options?: HotKeyOptions) => Handler;
    type KeyCombo = string[];
    type Make = (...keys: KeyCombo[]) => HotKey;
    type EventLike = KeyboardEvent & {
        nativeEvent?: KeyboardEvent;
    };
}
export declare const hotKey: {
    make: hotKey.Make;
    many: (...handlers: hotKey.Handler[]) => (e: hotKey.EventLike) => boolean;
    one: (...handlers: hotKey.Handler[]) => (e: hotKey.EventLike) => boolean;
    matcher: (keyCombo: hotKey.KeyCombo) => (e: KeyboardEvent) => boolean;
};
