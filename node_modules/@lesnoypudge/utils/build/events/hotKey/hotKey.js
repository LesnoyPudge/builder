import { KEY } from '../../index.js';
const matcher = (keyCombo) => {
    return (e) => {
        const activeKeys = Array.from(new Set([
            e.altKey && KEY.Alt.toLowerCase(),
            e.ctrlKey && KEY.Control.toLowerCase(),
            e.shiftKey && KEY.Shift.toLowerCase(),
            e.metaKey && KEY.Meta.toLowerCase(),
            e.key.toLowerCase(),
        ].filter(Boolean)));
        if (activeKeys.length !== keyCombo.length)
            return false;
        const isMatch = (keyCombo.map((key) => activeKeys.includes(key.toLowerCase()))
            .find((res) => !res)
            ?? true);
        return isMatch;
    };
};
const make = (...keyCombos) => {
    return (action, options) => {
        return (e) => {
            const isMatch = keyCombos.map((keyCombo) => {
                return matcher(keyCombo)(e);
            }).some((res) => res);
            if (!isMatch)
                return false;
            options?.prevent && e.preventDefault();
            options?.stop && e.stopPropagation();
            options?.stopImmediate && e.stopImmediatePropagation();
            action(e);
            return true;
        };
    };
};
const uniter = (maxCalls) => {
    return (...handlers) => {
        return (e) => {
            let count = 0;
            let bail = count >= maxCalls;
            const event = e.nativeEvent ?? e;
            handlers.forEach((handler) => {
                if (bail)
                    return;
                const isHandled = handler(event);
                if (isHandled)
                    count++;
                bail = count >= maxCalls;
            });
            return !!count;
        };
    };
};
export const hotKey = {
    make,
    many: uniter(Infinity),
    one: uniter(1),
    matcher,
};
//# sourceMappingURL=hotKey.js.map