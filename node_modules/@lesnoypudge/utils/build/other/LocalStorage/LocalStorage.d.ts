import { T } from '@lesnoypudge/types-utils-base/namespace';
export declare class LocalStorage<_Schema extends Record<string, unknown>> {
    private listeners;
    private cleanupCallback;
    constructor();
    cleanup(): void;
    set<_Key extends T.StringKeyOf<_Schema>>(key: _Key, value: _Schema[_Key]): void;
    get<_Key extends T.StringKeyOf<_Schema>, _DefaultValue extends (_Schema[_Key] | undefined)>(key: _Key, defaultValue?: _DefaultValue): (_DefaultValue extends undefined ? (_Schema[_Key] | undefined) : _Schema[_Key]);
    remove<_Key extends T.StringKeyOf<_Schema>>(key: _Key): void;
    clear(): void;
    onChange<_Key extends T.StringKeyOf<_Schema>>(key: _Key, callback: (value: _Schema[_Key] | undefined) => void): () => void;
}
