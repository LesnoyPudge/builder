import { addEventListener, ListenerStore, parseJSON } from '../../index.js';
let externalListeners;
export class LocalStorage {
    listeners;
    cleanupCallback;
    constructor() {
        if (externalListeners === undefined) {
            externalListeners = new ListenerStore();
        }
        this.listeners = externalListeners;
        this.cleanupCallback = addEventListener(window, 'storage', (e) => {
            // clear event
            if (e.key === null)
                return this.clear();
            // remove event
            if (e.newValue === null) {
                return this.remove(e.key);
            }
            // @ts-expect-error
            this.set(e.key, parseJSON(e.newValue));
        });
    }
    cleanup() {
        this.cleanupCallback();
    }
    set(key, value) {
        localStorage.setItem(key, JSON.stringify(value));
        this.listeners.trigger(key, value);
    }
    get(key, defaultValue) {
        const rawValue = localStorage.getItem(String(key));
        if (rawValue === null) {
            if (defaultValue !== undefined) {
                this.set(key, defaultValue);
            }
            // @ts-expect-error
            return defaultValue;
        }
        const value = parseJSON(rawValue);
        if (value === undefined) {
            if (defaultValue !== undefined) {
                this.set(key, defaultValue);
            }
            // @ts-expect-error
            return defaultValue;
        }
        return value;
    }
    remove(key) {
        localStorage.removeItem(key);
        this.listeners.trigger(key, undefined);
    }
    clear() {
        localStorage.clear();
        this.listeners.triggerAll(undefined);
    }
    onChange(key, callback) {
        // @ts-expect-error
        return this.listeners.add(key, callback);
    }
}
//# sourceMappingURL=LocalStorage.js.map