export class ListenerStore {
    store;
    constructor() {
        this.store = new Map();
    }
    add(key, listener) {
        let listeners = this.store.get(key);
        if (!listeners) {
            listeners = new Set();
            this.store.set(key, listeners);
        }
        listeners.add(listener);
        return () => this.remove(key, listener);
    }
    remove(key, listener) {
        const listeners = this.store.get(key);
        if (!listeners)
            return;
        listeners.delete(listener);
        if (listeners.size === 0) {
            this.store.delete(key);
        }
    }
    removeAll() {
        this.store.clear();
    }
    trigger(key, ...args) {
        const listeners = this.store.get(key);
        if (!listeners)
            return;
        listeners.forEach((listener) => {
            listener(...args);
        });
    }
    triggerAll(...args) {
        this.store.forEach((value) => {
            value.forEach((listener) => {
                listener(...args);
            });
        });
    }
    getSize() {
        let size = 0;
        this.store.forEach((value) => {
            size += value.size;
        });
        return size;
    }
}
//# sourceMappingURL=ListenerStore.js.map