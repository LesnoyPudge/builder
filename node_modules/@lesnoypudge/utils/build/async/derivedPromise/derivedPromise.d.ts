import { T } from '@lesnoypudge/types-utils-base/namespace';
type Resolve<Result> = (result: Result) => void;
type Reject = (reason?: any) => void;
type Executor<Result = any> = (res: Resolve<Result>, rej: Reject) => void;
export type DerivedPromiseControls<Result> = {
    resolve: Resolve<Result>;
    reject: Reject;
};
export declare const derivedPromise: <Result = void, FN extends Executor = T.AnyFunction<[Resolve<Result>, Reject], void>>(executor?: FN) => [promise: Promise<Result>, controls: DerivedPromiseControls<Result>];
export {};
