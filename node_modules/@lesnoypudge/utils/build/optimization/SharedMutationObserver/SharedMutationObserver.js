import { autoBind, ListenerStore } from '../../index.js';
export class SharedMutationObserver {
    listeners;
    observer;
    elementsToOptionsMap;
    constructor() {
        this.listeners = new ListenerStore();
        // eslint-disable-next-line @typescript-eslint/unbound-method
        this.observer = new MutationObserver(this.processRecords);
        this.elementsToOptionsMap = new Map();
        autoBind(this);
    }
    processRecords(records) {
        records.forEach((record) => {
            this.listeners.trigger(record.target, record);
        });
    }
    observe(element, listener, options) {
        this.elementsToOptionsMap.set(element, options);
        this.listeners.add(element, listener);
        this.observer.observe(element, options);
    }
    unobserve(element, listener) {
        this.listeners.remove(element, listener);
        this.elementsToOptionsMap.delete(element);
        if (this.listeners.getSize() < 1) {
            this.disconnect();
            return;
        }
        this.processRecords(this.observer.takeRecords());
        this.disconnect();
        this.elementsToOptionsMap.forEach((options) => {
            this.observe(element, listener, options);
        });
    }
    disconnect() {
        this.elementsToOptionsMap.clear();
        this.listeners.removeAll();
        this.observer.disconnect();
    }
}
//# sourceMappingURL=SharedMutationObserver.js.map