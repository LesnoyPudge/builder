import { autoBind, Cache, ListenerStore } from '../../index.js';
export class SharedIntersectionObserver {
    listeners;
    observers;
    elementsToOptionsMap;
    constructor() {
        this.listeners = new ListenerStore();
        this.observers = new Cache();
        this.elementsToOptionsMap = new Map();
        autoBind(this);
    }
    observerCallback(entries) {
        entries.forEach((entry) => {
            this.listeners.trigger(entry.target, entry);
        });
    }
    observe(element, listener, options) {
        this.elementsToOptionsMap.set(element, options);
        const observer = this.observers.getOrSet([options], 
        // eslint-disable-next-line @typescript-eslint/unbound-method
        () => new IntersectionObserver(this.observerCallback, options));
        this.listeners.add(element, listener);
        observer.observe(element);
    }
    unobserve(element, listener) {
        const options = this.elementsToOptionsMap.get(element);
        const observer = this.observers.get([options]);
        if (!observer)
            return;
        this.elementsToOptionsMap.delete(element);
        this.listeners.remove(element, listener);
        observer.unobserve(element);
    }
    disconnect() {
        this.elementsToOptionsMap.clear();
        this.listeners.removeAll();
        this.observers.destroy();
    }
}
//# sourceMappingURL=SharedIntersectionObserver.js.map