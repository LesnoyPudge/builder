import { autoBind, derivedPromise, noop } from '../../index.js';
export class InlineWorker {
    worker;
    queue;
    fn;
    onSuccess;
    onError;
    constructor(fn, onSuccess = noop, onError = noop) {
        this.worker = null;
        this.queue = [];
        this.fn = fn;
        this.onSuccess = onSuccess;
        this.onError = onError;
        autoBind(this);
    }
    createWorker(fn) {
        const workerCode = (`
            const workerFunction = (${fn.toString()});
        
            onmessage = (event) => {
                const args = event.data;
                const result = workerFunction(...args);
                postMessage(result);
            };
        `);
        const workerBlob = new Blob([workerCode], {
            type: 'application/javascript',
        });
        const worker = new Worker(URL.createObjectURL(workerBlob));
        worker.onerror = (event) => {
            this.queue[0]?.reject(event);
            this.onError(event);
        };
        worker.onmessage = (event) => {
            this.queue[0]?.resolve(event.data);
            this.onSuccess(event.data);
        };
        return worker;
    }
    start(...args) {
        if (!this.worker) {
            this.worker = this.createWorker(this.fn);
        }
        const [promise, controls] = derivedPromise();
        void promise.finally(() => {
            this.queue.shift();
            if (this.queue.length) {
                this.worker?.postMessage(this.queue[0]?.args);
            }
        });
        this.queue.push({
            promise,
            args,
            ...controls,
        });
        if (this.queue.length <= 1) {
            this.worker.postMessage(this.queue[0]?.args);
        }
        return promise;
    }
    cancel() {
        this.queue[0]?.reject();
    }
    terminate() {
        this.worker?.terminate();
        this.worker = null;
        const items = [...this.queue];
        this.queue = [];
        items.forEach((item) => item.reject());
    }
}
//# sourceMappingURL=InlineWorker.js.map