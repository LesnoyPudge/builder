import { ListenerStore, autoBind } from '../../index.js';
export class Counter {
    count;
    initialCount;
    step;
    initialStep;
    listenerStore;
    constructor(initialCount = 0, initialStep = 1) {
        this.count = initialCount;
        this.initialCount = initialCount;
        this.step = initialStep;
        this.initialStep = initialStep;
        autoBind(this);
    }
    setCount(value) {
        this.count = value;
        this.listenerStore?.trigger(null, value);
    }
    set = this.setCount.bind(this);
    getCount() {
        return this.count;
    }
    get = this.getCount.bind(this);
    setInitialCount(value) {
        this.initialCount = value;
    }
    getInitialCount() {
        return this.initialCount;
    }
    setStep(value) {
        this.step = value;
    }
    getStep() {
        return this.step;
    }
    setInitialStep(value) {
        this.initialStep = value;
    }
    getInitialStep() {
        return this.initialStep;
    }
    increase(value) {
        this.setCount(this.count + (value ?? this.step));
    }
    inc = this.increase.bind(this);
    decrease(value) {
        this.setCount(this.count - (value ?? this.step));
    }
    dec = this.decrease.bind(this);
    resetCount() {
        this.setCount(this.initialCount);
    }
    resetStep() {
        this.step = this.initialStep;
    }
    reset() {
        this.resetCount();
        this.resetStep();
    }
    onCountChange(cb) {
        if (!this.listenerStore) {
            this.listenerStore = new ListenerStore();
        }
        const store = this.listenerStore;
        store.add(null, cb);
        return () => store.remove(null, cb);
    }
}
//# sourceMappingURL=Counter.js.map